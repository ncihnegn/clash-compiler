version: 2

aliases:
  - &env
    TERM: xterm-color
    THREADS: 1
    CABAL_JOBS: 1

  - &submodules
    run:
      name: "Checkout submodules"
      command: git submodule update --init
  - &setup
    run:
      name: Setup system
      command: |
        # Only test on external pull requests
        if [ -n "$CIRCLE_PR_NUMBER" ]; then
          .ci/setup.sh
        fi
  - &cache_calc_key
    run:
      name: Calculate cache key
      command: |
        if [ -n "$CIRCLE_PR_NUMBER" ]; then
          md5sum .circleci/config.yml cabal.project .ci/cabal.project.local */*.cabal > .circleci_cachekey
        else
          echo not running > .circleci_cachekey
        fi
  - &cache_restore
    restore_cache:
      keys:
        - cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum ".circleci_cachekey" }}
        - cache-{{ .Environment.CIRCLE_JOB }}-
  - &cache_save
    save_cache:
      key: cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum ".circleci_cachekey" }}
      paths:
        - cabal-store
        - ~/.stack
        - /nix/store

  - &build
    run:
      name: Build dependencies and Clash itself
      command: |
        # Only test on external pull requests
        if [ -n "$CIRCLE_PR_NUMBER" ]; then
          .ci/build.sh
        fi

  - &nix_setup
    run:
      name: Setup binaries (such as git)
      command: |
        nix-env -i git findutils gnugrep coreutils openssh

        # Circle CI needs git/ssh in /usr/bin
        ln -s $(find /nix -type f -name git | grep libexec | head -n1) /usr/bin
        ln -s $(find /nix -type f -name ssh | grep openssh | head -n1) /usr/bin

  - &nix_build
    run:
      name: Build dependencies and Clash itself with Nix
      command: nix-build

  - &stack_build
    run:
      name: Build dependencies and Clash itself with Stack
      command: .ci/stack_build.sh

  - &run_tests
    run:
      name: Run tests
      command: |
        # Only test on external pull requests
        if [ -n "$CIRCLE_PR_NUMBER" ]; then
          .ci/test.sh
        fi

  # When testing a pull request on CircleCI,
  # fetch the result of merging it in.
  - &merge_pullrequest
    run:
      name: Checkout pull request merge result
      command: |
        if [ -n "$CIRCLE_PR_NUMBER" ]; then
          git fetch "$CIRCLE_REPOSITORY_URL" "pull/$CIRCLE_PR_NUMBER/merge:pull-$CIRCLE_PR_NUMBER-merged"
          git rev-parse "pull-$CIRCLE_PR_NUMBER-merged"
          git checkout "pull-$CIRCLE_PR_NUMBER-merged"
        fi

  - &build_default
    docker:
      - image: leonschoorl/clash-ci-image:trusty
    steps:
      - checkout
      - *merge_pullrequest
      - *submodules
      - *setup
      - *cache_calc_key
      - *cache_restore
      - *build
      - *cache_save
      - *run_tests
  - &build_with_stack
    docker:
      - image: leonschoorl/clash-ci-image:trusty
    steps:
      - checkout
      - *merge_pullrequest
      - *submodules
      - *cache_calc_key
      - *cache_restore
      - *stack_build
      - *cache_save
  - &build_with_nix
    docker:
      - image: nixos/nix
    steps:
      # I can't get caching to work on Nix due to missing certificates. Doesn't
      # seem too bad though, thanks to nix binary caching of 99% of Clash's
      # dependencies. cachix has been suggested to fix this (and! to improve
      # the user experience for people building Clash with Nix).
      - *nix_setup
      - checkout
      - *merge_pullrequest
      - *submodules
      - *nix_build

workflows:
  version: 2
  build_and_test_clash:
    jobs:
      - ghc-8.4.4
      - ghc-8.6.5-singular-hidden
      # - ghc-8.6.5
      - ghc-8.8.1
      - stack-build
      - nix-build

jobs:
  ghc-8.4.4:
    environment:
      <<: *env
      GHC: ghc-8.4.4
    <<: *build_default
  ghc-8.6.5:
    environment:
      <<: *env
      GHC: ghc-8.6.5
    <<: *build_default
  ghc-8.8.1:
    environment:
      <<: *env
      GHC: ghc-8.8.1
    <<: *build_default
  ghc-8.6.5-singular-hidden:
    environment:
      <<: *env
      GHC: ghc-8.6.5
      MULTIPLE_HIDDEN: no
    <<: *build_default
  stack-build:
    environment:
      <<: *env
    <<: *build_with_stack
  nix-build:
    environment:
      <<: *env
    <<: *build_with_nix
